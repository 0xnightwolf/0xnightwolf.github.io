<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ctf-writeups on The Wolf Den</title>
    <link>/ctf-writeups/</link>
    <description>Recent content in Ctf-writeups on The Wolf Den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 00:00:00 -0200</lastBuildDate>
    
        <atom:link href="/ctf-writeups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cyber Apocalypse 2021: Backdoor</title>
      <link>/ctf-writeups/ca-backdoor/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 -0200</pubDate>
      
      <guid>/ctf-writeups/ca-backdoor/</guid>
      <description>Note: I did not solve this challenge until after the CTF had officially ended.
File shows that bd, is a stripped binary which can make reversing a bit harder.
$ file bd bd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1da3a1d77c7109ce6444919f4a15e7e6c63d02fa, stripped Nothing relevant shows up in strings though it&amp;rsquo;s interesting to note the size of the binary.
Once opened in Ghidra, an interesting section can be seen in the program tree.</description>
      
    </item>
    
    <item>
      <title>Cyber Apocalypse 2021: Passphrase</title>
      <link>/ctf-writeups/ca-passphrase/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 -0100</pubDate>
      
      <guid>/ctf-writeups/ca-passphrase/</guid>
      <description>Passphrase is a ELF 64 bit executable. It is dynamically linked and is not stripped for debug symbols.
$ file passphrase passphrase: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=60f6b6064d2e34a2b6a24dda9feb943b0b8c360f, not stripped Strings doens&amp;rsquo;t reveal a whole lot of info. The binary prompts for a &amp;ldquo;secret passphrase&amp;rdquo;. If it is correct, it asks that a message, presumably the flag, be taken to the chief.</description>
      
    </item>
    
    <item>
      <title>Cyber Apocalypse 2021: Authenticator</title>
      <link>/ctf-writeups/ca-authenticator/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/ctf-writeups/ca-authenticator/</guid>
      <description>Authenticator is a ELF 64 bit executable. It is dynamically linked and is not stripped for debug symbols
$ file authenticator authenticator: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=66286657ca5a06147189b419238b2971b11c72db, not stripped Strings shows a lot of standard stuff and a few things that are likely directly related to this challenge. There are a couple of what seem to be dialog lines, mention of a flag and a rather strange sequence of, }a:Vh|}a:g}8j=}89gV&amp;lt;p&amp;lt;}:dV8&amp;lt;Vg9}V&amp;lt;9V&amp;lt;:j|{:.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Kernel_Memory_Leak</title>
      <link>/ctf-writeups/kernel-aslr/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0602</pubDate>
      
      <guid>/ctf-writeups/kernel-aslr/</guid>
      <description>Kernel_Memory_Leak The kernel is leaking memory to the user! That&#39;s probably not good, right?One of the syscalls can be convinced to leak the kernel stack. Find the leak and you&#39;ll receive a flag. Keep leaking kernel secrets until you see the }.(Hint: finding the leak is half the battle, getting it to leak the entire flag requires some outside the box thinking)Author: raviDisclaimer I was unable to solve this challenge until after the CTF had officially ended.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Whats_A_Syscall</title>
      <link>/ctf-writeups/whats-a-syscall/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0601</pubDate>
      
      <guid>/ctf-writeups/whats-a-syscall/</guid>
      <description>Whats_A_Syscall? Challenge Description
Syscall 14 is known as &amp;quot;SANDBOX_SPECIAL&amp;quot;... I wonder if that would be useful here.You&#39;ll be stuck in a never ending loop of binexec until you perform syscall 14.To learn about syscalls and how they work in pwnyOS, check out the documentation!System Calls in pwnyOS: https://github.com/sigpwny/pwnyOS-2020-docs/blob/master/Syscalls.pdfAuthor: raviSolution We start out with a welcome screen and are told that we are in a sandbox.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Time_To_Start</title>
      <link>/ctf-writeups/time-to-start/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0600</pubDate>
      
      <guid>/ctf-writeups/time-to-start/</guid>
      <description>Time_To_Start Challenge Description
Welcome to pwnyOS!!pwnyOS is a custom x86 operating system that supports link-time kASLR, multitasking and kernel threads, execution of genuine ELF files, a realtime high resolution graphics engine, and a custom hierarchical file system. This OS was written from the ground up with its use as a challenge for UIUCTF 2020 in mind. All source code in the OS is 100% custom handwritten C and assembly- there are no libraries used, and none of its code can be found anywhere online.</description>
      
    </item>
    
  </channel>
</rss>

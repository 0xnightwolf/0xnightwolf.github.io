<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on The Wolf Den</title>
    <link>/posts/</link>
    <description>Recent content in Posts on The Wolf Den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 00:00:00 -0200</lastBuildDate>
    
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cyber Apocalypse 2021: Backdoor</title>
      <link>/posts/ca-backdoor/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 -0200</pubDate>
      
      <guid>/posts/ca-backdoor/</guid>
      <description>Note: I did not solve this challenge until after the CTF had officially ended.
File shows that bd, is a stripped binary which can make reversing a bit harder.
$ file bd bd: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=1da3a1d77c7109ce6444919f4a15e7e6c63d02fa, stripped Nothing relevant shows up in strings though it&amp;rsquo;s interesting to note the size of the binary.
Once opened in Ghidra, an interesting section can be seen in the program tree.</description>
      
    </item>
    
    <item>
      <title>Cyber Apocalypse 2021: Passphrase</title>
      <link>/posts/ca-passphrase/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 -0100</pubDate>
      
      <guid>/posts/ca-passphrase/</guid>
      <description>Passphrase is a ELF 64 bit executable. It is dynamically linked and is not stripped for debug symbols.
$ file passphrase passphrase: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=60f6b6064d2e34a2b6a24dda9feb943b0b8c360f, not stripped Strings doens&amp;rsquo;t reveal a whole lot of info. The binary prompts for a &amp;ldquo;secret passphrase&amp;rdquo;. If it is correct, it asks that a message, presumably the flag, be taken to the chief.</description>
      
    </item>
    
    <item>
      <title>Cyber Apocalypse 2021: Authenticator</title>
      <link>/posts/ca-authenticator/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/ca-authenticator/</guid>
      <description>Authenticator is a ELF 64 bit executable. It is dynamically linked and is not stripped for debug symbols
$ file authenticator authenticator: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=66286657ca5a06147189b419238b2971b11c72db, not stripped Strings shows a lot of standard stuff and a few things that are likely directly related to this challenge. There are a couple of what seem to be dialog lines, mention of a flag and a rather strange sequence of, }a:Vh|}a:g}8j=}89gV&amp;lt;p&amp;lt;}:dV8&amp;lt;Vg9}V&amp;lt;9V&amp;lt;:j|{:.</description>
      
    </item>
    
    <item>
      <title>HTB Bucket</title>
      <link>/posts/bucket-writeup/</link>
      <pubDate>Sat, 24 Apr 2021 00:05:59 -0600</pubDate>
      
      <guid>/posts/bucket-writeup/</guid>
      <description>Bucket is a very interesting box that replicates an AWS Cloud Stack. It&amp;rsquo;s also quick to the draw on file clean up so some scripting is useful to obtain a foothold.
Nmap Starting off with the usual nmap scan shows two open ports. A bucket.htb web page on port 80 and SSH on port 22.
sudo nmap -sC -sV 10.10.10.212 [sudo] password for nightwolf: Starting Nmap 7.80 ( https://nmap.org ) at 2020-10-29 22:27 UTC Nmap scan report for 10.</description>
      
    </item>
    
    <item>
      <title>HTB Academy</title>
      <link>/posts/academy-writeup/</link>
      <pubDate>Sat, 10 Apr 2021 00:44:50 -0600</pubDate>
      
      <guid>/posts/academy-writeup/</guid>
      <description>Academy is a Linux box that focuses a lot on enumeration and attention to detail for both foothold and privilege escalation, for root it has a simple GTFO bin and lastly it was a &amp;ldquo;special box&amp;rdquo; that served as a way for HTB to announce academy.hackthebox.eu
Enumeration # Nmap 7.80 scan initiated Sat Nov 7 20:48:08 2020 as: nmap -sC -sV -oA Academy 10.129.20.80 Nmap scan report for 10.129.20.80 Host is up (0.</description>
      
    </item>
    
    <item>
      <title>HTB Passage</title>
      <link>/posts/passage-writeup/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/passage-writeup/</guid>
      <description>Intro Passage is a Ubuntu box. It had a few privesc and a few tricks up it&amp;rsquo;s sleeve to prevent what you might typically do for initial enumeration.
Enumeration A standard nmap scan shows that ssh is running on port 22 and an Apache web server is running on port 80.
sudo nmap -sV -sC -Pn -oA Passage 10.10.10.206 Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-19 17:14 MDT Nmap scan report for 10.</description>
      
    </item>
    
    <item>
      <title>HTB Doctor</title>
      <link>/posts/doctor-writeup/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/doctor-writeup/</guid>
      <description>Doctor has a &amp;ldquo;secure&amp;rdquo; message board system that allows us to gain code execution. From there, we access logs, find credentials, and privilege escalate to root by taking advantage of our local access to Spulnkd.
Enumeration sudo nmap -sC -sV 10.10.10.209 -oA Doctor Starting Nmap 7.80 ( https://nmap.org ) at 2020-10-18 19:07 UTC Nmap scan report for 10.10.10.209 Host is up (0.11s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.</description>
      
    </item>
    
    <item>
      <title>HTB Omni</title>
      <link>/posts/omni-writeup/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/omni-writeup/</guid>
      <description>Omni is a Easy machine from HTB. The info card features a question mark in place of the OS. It&amp;rsquo;s something a little bit different than normal. I would sharpen your PowerShell skill though.
Enumeration We start off with an NMAP scan and see a whole bunch of open port on what seems to be a Windows machine.
Nmap scan report for 10.10.10.204 Host is up (0.081s latency). Not shown: 65529 filtered ports PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 5985/tcp open upnp Microsoft IIS httpd 8080/tcp open upnp Microsoft IIS httpd | http-auth: | HTTP/1.</description>
      
    </item>
    
    <item>
      <title>HTB OpenKeyS</title>
      <link>/posts/openkeys-writeup/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/openkeys-writeup/</guid>
      <description>OpenKeyS is an OpenBSD box that features CVE 2019-19521 as an vulnerability that allows you to gain access to user and ultimately root.
Enumeration We start off with an NMAP scan we can see that there are two open ports. 22 for SSH and 80 for OpenBSD httpd.
Nmap scan report for 10.10.10.199 Host is up (0.079s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.</description>
      
    </item>
    
    <item>
      <title>HTB Buff</title>
      <link>/posts/buff-writeup/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/buff-writeup/</guid>
      <description>Buff is a windows box that features the website for a Gym Membership software and a simple Window stack based buffer overflow.
Scanning and Enumeration First thing to note about this box is it seems to have some odd things port wise. Example of that below. The only port that should be open is 8080. There isn&amp;rsquo;t anything to do with the other ports and we aren&amp;rsquo;t sure why it shows up consistently.</description>
      
    </item>
    
    <item>
      <title>HTB Tabby</title>
      <link>/posts/tabby-writeup/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/tabby-writeup/</guid>
      <description>Tabby has a Tomcat server that doesn&amp;rsquo;t seem to have vulnerability we can exploit. But we chaining an LFI allows us to make use of it. Containers also prove to be useful for more than what they were intended for.
Scanning and enumeration We start off, as always, with an NMAP scan to get an idea of what we are working with.
nightwolf@kali:~/CTFs/HTB/Tabby$ nmap -sV -sC 10.10.10.194 Starting Nmap 7.80 ( https://nmap.</description>
      
    </item>
    
    <item>
      <title>HTB Blunder</title>
      <link>/posts/blunder-writeup/</link>
      <pubDate>Sat, 17 Oct 2020 23:05:59 -0600</pubDate>
      
      <guid>/posts/blunder-writeup/</guid>
      <description>Blunder is a box that starts with a Bludit based blog being used to store random facts and a Sudoers file was configured with the intent to prevent us from running bash as root. It was less than sucessful.
Scanning and Enumeration We start off with a basic nmap scan.
sudo nmap -sV -sC 10.10.10.191 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 08:44 MDT Nmap scan report for 10.10.10.191 Host is up (0.</description>
      
    </item>
    
    <item>
      <title>HTB Admirer</title>
      <link>/posts/admirer-writeup/</link>
      <pubDate>Sat, 26 Sep 2020 17:44:50 -0600</pubDate>
      
      <guid>/posts/admirer-writeup/</guid>
      <description>Admirer is a Linux box that features a vulnerable database setup and leveraging a maliciously crafted python library to achieve root.
Enumeration We start off, as always, with an NMAP Scan.
Nmap scan report for 10.10.10.187Host is up (0.12s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)| ssh-hostkey:| 2048 4a:71:e9:21:63:69:9d:cb:dd:84:02:1a:23:97:e1:b9 (RSA)| 256 c5:95:b6:21:4d:46:a4:25:55:7a:87:3e:19:a8:e7:02 (ECDSA)|_ 256 d0:2d:dd:d0:5c:42:f8:7b:31:5a:be:57:c4:a9:a7:56 (ED25519)80/tcp open http Apache httpd 2.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Kernel_Memory_Leak</title>
      <link>/posts/kernel-aslr/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0602</pubDate>
      
      <guid>/posts/kernel-aslr/</guid>
      <description>Kernel_Memory_Leak The kernel is leaking memory to the user! That&#39;s probably not good, right?One of the syscalls can be convinced to leak the kernel stack. Find the leak and you&#39;ll receive a flag. Keep leaking kernel secrets until you see the }.(Hint: finding the leak is half the battle, getting it to leak the entire flag requires some outside the box thinking)Author: raviDisclaimer I was unable to solve this challenge until after the CTF had officially ended.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Whats_A_Syscall</title>
      <link>/posts/whats-a-syscall/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0601</pubDate>
      
      <guid>/posts/whats-a-syscall/</guid>
      <description>Whats_A_Syscall? Challenge Description
Syscall 14 is known as &amp;quot;SANDBOX_SPECIAL&amp;quot;... I wonder if that would be useful here.You&#39;ll be stuck in a never ending loop of binexec until you perform syscall 14.To learn about syscalls and how they work in pwnyOS, check out the documentation!System Calls in pwnyOS: https://github.com/sigpwny/pwnyOS-2020-docs/blob/master/Syscalls.pdfAuthor: raviSolution We start out with a welcome screen and are told that we are in a sandbox.</description>
      
    </item>
    
    <item>
      <title>UIUCTF Time_To_Start</title>
      <link>/posts/time-to-start/</link>
      <pubDate>Mon, 20 Jul 2020 17:44:50 -0600</pubDate>
      
      <guid>/posts/time-to-start/</guid>
      <description>Time_To_Start Challenge Description
Welcome to pwnyOS!!pwnyOS is a custom x86 operating system that supports link-time kASLR, multitasking and kernel threads, execution of genuine ELF files, a realtime high resolution graphics engine, and a custom hierarchical file system. This OS was written from the ground up with its use as a challenge for UIUCTF 2020 in mind. All source code in the OS is 100% custom handwritten C and assembly- there are no libraries used, and none of its code can be found anywhere online.</description>
      
    </item>
    
  </channel>
</rss>
